# Development-specific Docker Compose override
# Use with: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

services:
  # Override API service for development
  api:
    build:
      target: development  # Use development stage of Dockerfile
    environment:
      DEBUG: "true"
      AUTO_RELOAD: "true"
      LOG_SQL_QUERIES: "true"
      DEV_MODE: "true"
      # Use MinIO for local development instead of R2
      R2_ACCESS_KEY: minioadmin
      R2_SECRET_KEY: minioadmin123
      R2_ENDPOINT: http://minio:9000
      R2_BUCKET: cowcow-recordings
    volumes:
      # Mount source code for hot reloading
      - ./server:/app
      # Mount uploads directory for persistence
      - ./uploads:/app/uploads
    depends_on:
      - postgres
      - redis
      - minio
    profiles:
      - development

  # Enable MinIO for development
  minio:
    profiles:
      - development

  # Add a database admin interface for development
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: cowcow-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@cowcow.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - cowcow-network
    profiles:
      - development

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: cowcow-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - cowcow-network
    profiles:
      - development

  # Grafana for monitoring (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: cowcow-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - cowcow-network
    profiles:
      - monitoring

volumes:
  pgadmin_data:
    driver: local
  grafana_data:
    driver: local